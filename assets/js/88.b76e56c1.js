(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{394:function(t,s,a){"use strict";a.r(s);var n=a(5),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("blockquote",[s("p",[t._v("以下内容摘抄自以下网站:"),s("a",{attrs:{href:"https://vue3.chengpeiquan.com/guide.html#%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9D%97%E5%8C%96%E8%AE%BE%E8%AE%A1",target:"_blank",rel:"noopener noreferrer"}},[t._v("学习模块化设计"),s("OutboundLink")],1)])]),t._v(" "),s("h1",{attrs:{id:"📎-了解模块化设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#📎-了解模块化设计"}},[t._v("#")]),t._v(" 📎 了解模块化设计")]),t._v(" "),s("blockquote",[s("p",[t._v("在软件工程的设计原则里，有一个原则叫 “单一职责” 。")]),t._v(" "),s("p",[t._v("假设一个代码块负责了多个职责的功能支持，在后续的迭代过程中，维护成本会极大的增加，虽然只需要修改这个代码块，但需要兼顾职责 1 、职责 2 、职责 3 … 等多个职责的兼容性，稍不注意就会引起工程运行的崩溃。")]),t._v(" "),s("p",[t._v("“单一职责” 的目的就是减少功能维护带来的风险，把代码块的职责单一化，让代码的可维护性更高。")])]),t._v(" "),s("p",[t._v("一个完整业务的内部实现，不应该把各种代码都耦合在一起，而应该按照职责去划分好代码块，再进行组合，形成一个 “高内聚，低耦合” 的工程设计。")]),t._v(" "),s("p",[t._v("模块化就是由此而来，在前端工程里，每个单一职责的代码块，就叫做模块（ Module ） ，模块有自己的作用域，功能与业务解耦，非常方便复用和移植。")]),t._v(" "),s("h1",{attrs:{id:"如何实现模块化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何实现模块化"}},[t._v("#")]),t._v(" 如何实现模块化")]),t._v(" "),s("p",[t._v("在前端工程的发展过程中，不同时期诞生了很多不同的模块化机制，最为主流的有以下几种：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("模块化方案")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("全称")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("适用范围")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("CJS")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("CommonJS")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Node 端")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("s",[t._v("AMD")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("s",[t._v("Async Module Definition")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("s",[t._v("浏览器")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("s",[t._v("CMD")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("s",[t._v("Common Module Definition")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("s",[t._v("浏览器")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("s",[t._v("UMD")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("s",[t._v("Universal Module Definition")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("s",[t._v("Node 端和浏览器")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("ESM")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("ES Module")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Node 端和浏览器")])])])]),t._v(" "),s("blockquote",[s("p",[t._v("其中 AMD 、CMD 、 UMD 都已经属于有点过去式的模块化方案了，在新的业务里，结合各种编译工具，可以直接用最新的 ESM 方案来实现模块化，所以可以在后续有接触的时候再了解。")])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("ESM")]),t._v(" （ ES Module ） 是 JavaScript 在 ES6（ ECMAScript 2015 ）版本推出的模块化标准，旨在成为浏览器和服务端通用的模块解决方案。")]),t._v(" "),s("li",[s("strong",[t._v("CJS")]),t._v(" （ CommonJS ） 原本是服务端的模块化标准（设计之初也叫 ServerJS ），是为 JavaScript 设计的用于浏览器之外的一个模块化方案， Node 默认支持了该规范，在 Node 12 之前也只支持 CJS ，但从 Node 12 开始，已经同时支持 ES Module 的使用。")])]),t._v(" "),s("p",[t._v("其实，不论是 Node 端还是浏览器端， ES Module 是统一的模块化标准了！")]),t._v(" "),s("p",[t._v("但由于历史原因， CJS 在 Node 端依然是非常主流的模块化写法，所以还是值得进行了解，因此下面的内容将主要介绍 CJS 和 ESM 这两种模块化规范是如何实际运用。")]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"用-commonjs-设计模块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用-commonjs-设计模块"}},[t._v("#")]),t._v(" 用 CommonJS 设计模块")]),t._v(" "),s("p",[t._v("虽然现在"),s("strong",[t._v("推荐使用")]),t._v(" ES Module 作为模块化标准，但是日后你在工作的过程中，还是不免会遇到要维护一些老项目，因此了解 CommonJS 还是非常有必要的。")]),t._v(" "),s("h4",{attrs:{id:"基本语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本语法"}},[t._v("#")]),t._v(" 基本语法")]),t._v(" "),s("p",[t._v("CommonJs 规范规定，每个模块内部有两个变量可以使用："),s("code",[t._v("require")]),t._v(" 和 "),s("code",[t._v("module")]),t._v("。")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("module")]),t._v(" 代表的是当前模块，是一个对象，存储着当前模块的相关联的属性和方法。"),s("code",[t._v("exports")]),t._v(" 是 "),s("code",[t._v("module")]),t._v("上的一个属性。该属性表示当前模块对外输出的接口，其它文件加载该模块，实际上就是读取 "),s("code",[t._v("module.exports")]),t._v(" 变量。")]),t._v(" "),s("ul",[s("li",[t._v("使用 "),s("code",[t._v("module.exports")]),t._v(" 语法导出模块，可以导出任意合法的 JavaScript 类型，例如：字符串、布尔值、对象、数组、函数等等。")])])]),t._v(" "),s("li",[s("p",[t._v("使用 "),s("code",[t._v("require")]),t._v(" "),s("strong",[t._v("导入模块")]),t._v("，在导入的时候，当文件扩展名是 "),s("code",[t._v(".js")]),t._v(" 时，可以只写文件名，而此时我们使用的是 "),s("code",[t._v(".cjs")]),t._v(" 扩展名，所以需要完整的书写。")])])]),t._v(" "),s("h4",{attrs:{id:"默认导出和导入-字面量形式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#默认导出和导入-字面量形式"}},[t._v("#")]),t._v(" 默认导出和导入（ 字面量形式 ）")]),t._v(" "),s("blockquote",[s("p",[t._v("默认导出即一个模块只包含一个值；而导入默认值则意味着，导入时声明的变量名就是对应模块的值。")])]),t._v(" "),s("p",[t._v("现在我们假设有一个 "),s("code",[t._v("index.cjs")]),t._v(" 和一个 "),s("code",[t._v("module.cjs")]),t._v(" 文件，我们的导入与导出可以这样来声明")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// module.cjs 默认导出")]),t._v("\nmodule"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello Tom ~"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// index.cjs 默认导入")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./module.cjs"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// --\x3e "Hello Tom ~"')]),t._v("\n")])])]),s("h4",{attrs:{id:"命名导出和导入-对象形式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#命名导出和导入-对象形式"}},[t._v("#")]),t._v(" 命名导出和导入（ 对象形式 ）")]),t._v(" "),s("blockquote",[s("p",[t._v("默认导出的时候，一个模块只包含一个值，有时候你想把很多相同分类的函数进行模块化集中管理，例如想做一些 utils 类的工具函数文件、或者是维护项目的配置文件，全部使用默认导出的话，你会有非常多的文件要维护。")]),t._v(" "),s("p",[t._v("那么就可以用到命名导出，这样既可以导出多个数据，又可以统一在一个文件里维护管理，命名导出是先声明多个变量，然后通过 "),s("code",[t._v("{}")]),t._v(" 对象的形式导出。")])]),t._v(" "),s("p",[t._v("现在我们再假设有一个 "),s("code",[t._v("index.cjs")]),t._v(" 和一个 "),s("code",[t._v("module.cjs")]),t._v(" 文件，我们的导入与导出可以这样来声明")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// module.cjs 命名导出")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"helloWorld"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Tom"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nmodule"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// index.cjs 命名导入")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" moduleData "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./module.cjs"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("moduleData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// --\x3e { foo: [Function: foo], name: 'Tom' }")]),t._v("\n")])])]),s("p",[t._v("也可以使用 ES6 的解构赋值语法进行数据的提取")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./module.cjs"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// --\x3e 'helloWorld'")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// --\x3e Tom")]),t._v("\n")])])]),s("h4",{attrs:{id:"导入时重命名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#导入时重命名"}},[t._v("#")]),t._v(" 导入时重命名")]),t._v(" "),s("blockquote",[s("p",[t._v("以上都是基于非常理想的情况下使用模块，有时候不同的模块之间也会存在相同命名导出的情况，我们来看看模块化是如何解决这个问题的。")])]),t._v(" "),s("p",[t._v("我们的模块文件保持不变，依然导出这两个变量：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// module.cjs")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello World from foo."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Tom"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nmodule"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("这次在入口文件里也声明一个 "),s("code",[t._v("foo")]),t._v(" 变量，我们在导入的时候对模块里的 "),s("code",[t._v("foo")]),t._v(" 进行了重命名操作。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// index.cjs")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" foo2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// !这里进行了重命名")]),t._v("\n    name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./module.cjs"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 就不会造成变量冲突")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" foo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// --\x3e 1")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用新的命名来调用模块里的方法")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// --\x3e Hello World from foo.")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这个不冲突就可以不必处理")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// --\x3e Tom")]),t._v("\n")])])]),s("p",[t._v("这是利用了 ES6 解构对象的 "),s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#%E7%BB%99%E6%96%B0%E7%9A%84%E5%8F%98%E9%87%8F%E5%90%8D%E8%B5%8B%E5%80%BC",target:"_blank",rel:"noopener noreferrer"}},[t._v("给新的变量名赋值"),s("OutboundLink")],1),t._v(" 的技巧。")]),t._v(" "),s("h2",{attrs:{id:"用-es-module-设计模块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用-es-module-设计模块"}},[t._v("#")]),t._v(" 用 ES Module 设计模块")]),t._v(" "),s("blockquote",[s("p",[t._v("ES Module 是新一代的模块化标准，它是在 ES6（ ECMAScript 2015 ）版本推出的，是原生 JavaScript 的一部分。")]),t._v(" "),s("p",[t._v("不过因为历史原因，如果你要直接在浏览器里使用该方案，在不同的浏览器里会有一定的兼容问题，一般都需要借助构建工具来开发，工具会帮你抹平这些差异。")]),t._v(" "),s("p",[t._v("很多新推出的构建工具都默认只支持该方案（ e.g. Vite 、 Rollup ），要兼容 CJS 反而需要自己引入插件单独配置。")]),t._v(" "),s("p",[t._v("后面我们会全程使用 TypeScript 来写 Vue3 ，也是需要使用 ES Module ，因此了解它对你非常重要。")]),t._v(" "),s("p",[t._v("以下简称 ESM 代指 ES Module 规范。")])]),t._v(" "),s("h4",{attrs:{id:"基本语法-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本语法-2"}},[t._v("#")]),t._v(" 基本语法")]),t._v(" "),s("p",[t._v("ESM 使用 "),s("code",[t._v("export default")]),t._v(" （默认导出）和 "),s("code",[t._v("export")]),t._v(" （命名导出）这两个语法导出模块，和 CJS 一样， ESM 也可以导出任意合法的 JavaScript 类型，例如：字符串、布尔值、对象、数组、函数等等。")]),t._v(" "),s("p",[t._v("使用 "),s("code",[t._v("import ... from ...")]),t._v(" 导入模块，在导入的时候，如果文件扩展名是 "),s("code",[t._v(".js")]),t._v(" 则可以省略文件名后缀，否则需要把扩展名也完整写出来。")])])}),[],!1,null,null,null);s.default=e.exports}}]);