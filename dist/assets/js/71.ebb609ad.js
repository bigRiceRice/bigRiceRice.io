(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{373:function(t,a,s){"use strict";s.r(a);var e=s(5),o=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"创建-react-应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建-react-应用"}},[t._v("#")]),t._v(" 创建 React 应用")]),t._v(" "),a("ol",[a("li",[t._v("使用 "),a("code",[t._v("npx create-react-app [project-name]")]),t._v(" 创建工程目录")]),t._v(" "),a("li",[a("code",[t._v("cd [project-name]")])]),t._v(" "),a("li",[a("code",[t._v("yarn start")])])]),t._v(" "),a("blockquote",[a("p",[t._v("💎 推荐使用 vite 创建\n"),a("code",[t._v("npm create vite")]),t._v(" 随后选择 React 模板")])]),t._v(" "),a("h2",{attrs:{id:"jsx-语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jsx-语法"}},[t._v("#")]),t._v(" JSX 语法")]),t._v(" "),a("p",[t._v("在 React 中使用 JSX 语法来定义 "),a("strong",[t._v("HTML")]),t._v(" 中的内容，即将 HTML 之间写在 JS 代码中，就像这样：")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301032058871.png",alt:"code"}}),t._v(" "),a("h3",{attrs:{id:"js-表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-表达式"}},[t._v("#")]),t._v(" JS 表达式")]),t._v(" "),a("p",[t._v("在 JSX 中，在单个花括号 "),a("code",[t._v("{}")]),t._v(" 中填写 JS 表达式来完成数据的绑定或函数的运算：")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301032059209.png",alt:"code"}}),t._v(" "),a("p",[t._v("JSX 也是一个表达式：在编译之后，JSX 表达式会被转为普通 JavaScript 函数调用，并且对其取值后得到 JavaScript 对象。")]),t._v(" "),a("p",[t._v("这意味着可以在 "),a("code",[t._v("if")]),t._v(" 语句和 "),a("code",[t._v("for")]),t._v(" 循环的代码块中使用 JSX，将 JSX 赋值给变量，把 JSX 当作参数传入，以及从函数中返回 JSX。")]),t._v(" "),a("h3",{attrs:{id:"绑定事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#绑定事件"}},[t._v("#")]),t._v(" 绑定事件")]),t._v(" "),a("p",[t._v("在 JSX 中，使用 "),a("code",[t._v("onXXX")]),t._v(" 来绑定事件，例如 "),a("code",[t._v("onClick")]),t._v(" 用来监听点击事件，并传入需要执行的函数：")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301032101566.png",alt:"code"}}),t._v(" "),a("ul",[a("li",[a("h5",{attrs:{id:"jsx-的事件传参只能通过使用箭头函数二次调用待执行函数后传参"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jsx-的事件传参只能通过使用箭头函数二次调用待执行函数后传参"}},[t._v("#")]),t._v(" JSX 的事件传参只能通过使用箭头函数二次调用待执行函数后传参")])]),t._v(" "),a("li",[a("p",[t._v("或调用一个柯里化函数：")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301032110905.png",alt:"code"}})])]),t._v(" "),a("h3",{attrs:{id:"列表渲染"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#列表渲染"}},[t._v("#")]),t._v(" 列表渲染")]),t._v(" "),a("p",[t._v("在 React 中，没有 "),a("code",[t._v("wx:for")]),t._v(" 或 "),a("code",[t._v("v-for")]),t._v(" 这样的语法糖，只能使用原生的遍历渲染，"),a("strong",[t._v("且有且只有")]),t._v(" "),a("code",[t._v(".map")]),t._v(" 可以完成，因为 "),a("code",[t._v(".forEach")]),t._v(" 没有返回值：")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("key")]),t._v(" 属性也是必不可少的！")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301032112506.png",alt:"code"}})]),t._v(" "),a("h3",{attrs:{id:"注意"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注意"}},[t._v("#")]),t._v(" 注意")]),t._v(" "),a("p",[t._v("JSX 中有许多规则，比如：")]),t._v(" "),a("ul",[a("li",[t._v("定义元素的类不再是 "),a("code",[t._v("class")]),t._v(" 而是 "),a("code",[t._v("className")])]),t._v(" "),a("li",[a("code",[t._v("<label>")]),t._v(" 元素的 "),a("code",[t._v("for")]),t._v(" 属性变成了 "),a("code",[t._v("htmlFor")])]),t._v(" "),a("li",[t._v("JSX 元素必须有一个共同的父标签，就像 "),a("code",[t._v("VUE2")]),t._v(" 那样\n"),a("ul",[a("li",[t._v("但可以使用 "),a("code",[t._v("<></>")]),t._v(" 这样诡异的语法糖 🙄")])])]),t._v(" "),a("li",[t._v("注释的语法为 "),a("code",[t._v("{/* */}")])])]),t._v(" "),a("h2",{attrs:{id:"组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件"}},[t._v("#")]),t._v(" 组件")]),t._v(" "),a("p",[t._v("在 React 中，一般有两种方式定义组件：")]),t._v(" "),a("ol",[a("li",[t._v("函数式组件")]),t._v(" "),a("li",[t._v("类组件")])]),t._v(" "),a("p",[t._v("它们都必须满足以下条件：")]),t._v(" "),a("ol",[a("li",[t._v("用户定义的组件"),a("strong",[t._v("必须以大写字母开头")])]),t._v(" "),a("li",[t._v("都必须返回 JSX 语法形式或 "),a("code",[t._v("createElement()")]),t._v(" 创建的元素")])]),t._v(" "),a("h3",{attrs:{id:"函数式组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数式组件"}},[t._v("#")]),t._v(" 函数式组件")]),t._v(" "),a("p",[t._v("函数式组件的定义更像 Vue3 的 Composition API，因为它可以配合 "),a("strong",[a("em",[t._v("Hook")])]),t._v(" 函数使用，灵活性更高！")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301032119413.png",alt:"code"}}),t._v(" "),a("p",[t._v("函数式组件无法像类组件那样正常的定义生命周期与私有状态。但是，它可以使用 "),a("strong",[a("em",[t._v("Hooks")])]),t._v(" 钩子来定义！")]),t._v(" "),a("blockquote",[a("p",[a("em",[t._v("Hook")]),t._v(" 是 *React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。")])]),t._v(" "),a("p",[t._v("就像这样，弥补不能正常定义私有状态的缺点，且更加灵活：")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301032120566.png",alt:"code"}}),t._v(" "),a("h3",{attrs:{id:"类组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类组件"}},[t._v("#")]),t._v(" 类组件")]),t._v(" "),a("p",[t._v("类组件像 "),a("em",[t._v("Vue2")]),t._v(" 的 Options API 风格。")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301032121965.png",alt:"code"}}),t._v(" "),a("p",[t._v("类组件相比于函数组件直接将状态定义在 "),a("code",[t._v("state")]),t._v(" 中，且直接定义生命周期钩子，而且必须返回一个 "),a("code",[t._v("render")]),t._v(" 方法。")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301032131087.png",alt:"code"}}),t._v(" "),a("h3",{attrs:{id:"两者之间的异同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#两者之间的异同"}},[t._v("#")]),t._v(" 两者之间的异同")]),t._v(" "),a("h4",{attrs:{id:"不同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不同"}},[t._v("#")]),t._v(" 不同")]),t._v(" "),a("p",[t._v("函数式组件")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("根基是 FP(函数式编程)，与数学中的函数思想类似，所以假定输入和输出存在某种关联的话，那么相同输入必定会有"),a("strong",[t._v("相同的输出（状态同步问题）")])])]),t._v(" "),a("li",[a("p",[t._v("代码风格依赖 "),a("em",[t._v("Hook")])])]),t._v(" "),a("li",[a("p",[t._v("无法实现继承")])]),t._v(" "),a("li",[a("p",[t._v("Hook 完成代码复用方便")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("this")]),t._v(" 为 "),a("code",[t._v("undefinde")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("相对于类组件，函数组件更加的纯粹，简单，更利于测试，这是本质上的区别")])]),t._v(" "),a("p",[t._v("类组件")]),t._v(" "),a("ul",[a("li",[t._v("根基是 OOP(面向对象编程)，所以它会有继承，有内部状态管理等")]),t._v(" "),a("li",[t._v("代码风格依赖配置项")]),t._v(" "),a("li",[t._v("可以实现继承")]),t._v(" "),a("li",[t._v("HOC 高阶组件完成代码复用很麻烦")])]),t._v(" "),a("h4",{attrs:{id:"相同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相同"}},[t._v("#")]),t._v(" 相同")]),t._v(" "),a("p",[t._v("组件是 React 可复用的最小代码片段，它们会返回要在页面中渲染 React 元素。")]),t._v(" "),a("p",[t._v("也正是基于这一点，所以**在 React 中无论是函数组件，还是类组件，其实它们最终呈现的效果都是一致的，**如果你原因也可以把类组件重构成函数组件，反之也可以（虽然不推荐）。")]),t._v(" "),a("h4",{attrs:{id:"关于-状态同步问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于-状态同步问题"}},[t._v("#")]),t._v(" 关于“状态同步问题”")]),t._v(" "),a("blockquote",[a("p",[t._v("参考文章："),a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/208551225#:~:text=%E4%BA%8C%E3%80%81%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6%E4%B8%8E%E7%B1%BB%E7%BB%84%E4%BB%B6%E7%9A%84%E5%8C%BA%E5%88%AB",target:"_blank",rel:"noopener noreferrer"}},[t._v("react 函数式组件与类组件区别"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("上面所说的函数式组件相同输入必定会有"),a("strong",[t._v("相同的输出")]),t._v("，其实就体现在"),a("strong",[t._v("函数组件会一直保存捕获当前渲染时所用的值")])]),t._v(" "),a("p",[t._v("下面有一个例子：")]),t._v(" "),a("blockquote",[a("p",[t._v("函数式组件与类组件在点击按钮的两秒后显示当前的 Prop 值")])]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301131641171.png",alt:"code"}}),t._v(" "),a("blockquote",[a("p",[t._v("在父组件中添加两个组件")])]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301131642989.png",alt:"code"}}),t._v(" "),a("blockquote",[a("p",[t._v("显示效果：")])]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301131644855.png",alt:"image-20230113164406093"}}),t._v(" "),a("p",[t._v("定义好后，我们按以下操作测试代码：")]),t._v(" "),a("ol",[a("li",[t._v("点击函数查询 / 类查询")]),t._v(" "),a("li",[t._v("在两秒中内切换 "),a("code",[t._v("select")]),t._v(" 框中的值")]),t._v(" "),a("li",[t._v("查看弹出信息")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("下面是点击类查询的结果：")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301131702115.gif",alt:"demo"}})]),t._v(" "),a("li",[a("p",[t._v("下面是点击函数查询的结果：")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301131705340.gif",alt:"demo"}})])]),t._v(" "),a("p",[t._v("通过上述操作，我们可以发现，不管是 props 还是自身的 state，函数式组件中弹出的值都是点击按钮那一刻的值（相同输入必定会有"),a("strong",[t._v("相同的输出")]),t._v("），而类组件可以保持输入最新的值。")]),t._v(" "),a("p",[t._v("首先不论是函数式组件还是类组件，只要状态或者 props 发生变化了那就会触发重新渲染，而且对于没有进行过性能优化（memo）的子组件来说，只要父组件重新渲染了，子组件就会跟着重新渲染。而且在 react 中 "),a("strong",[t._v("props 是不可变的，而 "),a("code",[t._v("this")]),t._v(" 是一直在改变的")]),t._v("。")]),t._v(" "),a("p",[t._v("所以类组件中的方法点击时可以获取到最新的实例（即 "),a("code",[t._v("this")]),t._v("），而函数组件在渲染的时候由于"),a("strong",[t._v("闭包")]),t._v("的特性捕获了渲染时的值，所以例子会出现这种现象。")]),t._v(" "),a("blockquote",[a("p",[t._v("那么有没有一种方式解决呢？")]),t._v(" "),a("p",[t._v("在这个例子中将两者的行为对调了："),a("a",{attrs:{href:"https://codesandbox.io/s/eloquent-glitter-zh900?file=/src/FunctionComponent.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("类组件使用闭包，函数组件使用 useRef"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"组件传参"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件传参"}},[t._v("#")]),t._v(" 组件传参")]),t._v(" "),a("h3",{attrs:{id:"父子组件传参"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#父子组件传参"}},[t._v("#")]),t._v(" 父子组件传参")]),t._v(" "),a("p",[t._v("在 React 中，在子组件上自定义属性即可完成传参，父组件传递回调函数子组件也可以完成传参。")]),t._v(" "),a("p",[t._v("下面是一个子组件增加父组件数字的例子：")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301032132828.png",alt:"code"}}),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301032132394.png",alt:"code"}}),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301032133851.png",alt:"code"}}),t._v(" "),a("h3",{attrs:{id:"context-传参"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#context-传参"}},[t._v("#")]),t._v(" Context 传参")]),t._v(" "),a("p",[t._v("更多时候，通过 "),a("code",[t._v("<Son />")]),t._v(" 将参数传递到最下的组件这种方式太过繁琐.")]),t._v(" "),a("p",[t._v("我们可以使用 "),a("code",[t._v("createContext")]),t._v(" 来解决，创建一个上下文空间，被这个上下文空间包裹的所有组件都可以共享数据：")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301032136483.png",alt:"code"}}),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301032135450.png",alt:"code"}}),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301032134843.png",alt:"code"}}),t._v(" "),a("p",[t._v("值得注意的是，"),a("code",[t._v("<Context.Consumer>")]),t._v(" 中内容"),a("strong",[t._v("必须")]),t._v("是一个返回 JSX 元素的函数。")]),t._v(" "),a("p",[t._v("但是使用这样的方式来传参会显得代码杂乱，我们可以使用 "),a("code",[t._v("useContext")]),t._v(" "),a("strong",[a("em",[t._v("Hook")])]),t._v(" 来使用消费者！")]),t._v(" "),a("p",[t._v("就像这样：")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301032137606.png",alt:"code"}}),t._v(" "),a("h2",{attrs:{id:"state"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state"}},[t._v("#")]),t._v(" State")]),t._v(" "),a("p",[t._v("在 React 中，数据都定义在 "),a("code",[t._v("state")]),t._v(" 状态中，可以将它看成 Vue 的 "),a("code",[t._v("data")]),t._v("，只有定义在 "),a("code",[t._v("state")]),t._v(" 中的数据被修改才能触发视图更新！")]),t._v(" "),a("h4",{attrs:{id:"如何定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何定义"}},[t._v("#")]),t._v(" 如何定义")]),t._v(" "),a("p",[t._v("类组件这样定义：")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301032140241.png",alt:"code"}}),t._v(" "),a("p",[t._v("函数组件使用 "),a("code",[t._v("useState")]),t._v(" "),a("strong",[a("em",[t._v("Hook")])]),t._v(" 定义：")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301032142128.png",alt:"code"}}),t._v(" "),a("p",[t._v("当 State 中的数据需要修改时，直接修改它是不会触发视图更新的，需要调用 "),a("code",[t._v("ustState")]),t._v(" 返回的数组中的第二个元素，即以 "),a("code",[t._v("set")]),t._v(" 开头的函数来修改数据。")]),t._v(" "),a("p",[t._v("下面是一个点击累加的例子：")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301032143017.png",alt:"code"}}),t._v(" "),a("p",[t._v("使用类组件复刻它：")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301032144928.png",alt:"code"}}),t._v(" "),a("h4",{attrs:{id:"正确地使用-state"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正确地使用-state"}},[t._v("#")]),t._v(" 正确地使用 State")]),t._v(" "),a("p",[t._v("在类组件中使用 "),a("code",[t._v("setState()")]),t._v(" 我们应该了解三件事：")]),t._v(" "),a("h5",{attrs:{id:"不要直接修改-state"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不要直接修改-state"}},[t._v("#")]),t._v(" 不要直接修改 State！")]),t._v(" "),a("p",[t._v("例如，此代码不会重新渲染组件：")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301032144989.png",alt:"code"}}),t._v(" "),a("p",[t._v("而是应该使用 "),a("code",[t._v("setState()")]),t._v(" ：")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301032145006.png",alt:"code"}}),t._v(" "),a("h5",{attrs:{id:"state-的更新可能是异步的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-的更新可能是异步的"}},[t._v("#")]),t._v(" State 的更新可能是异步的")]),t._v(" "),a("p",[t._v("出于性能考虑，React 可能会把多个 "),a("code",[t._v("setState()")]),t._v(" 调用合并成一个调用。")]),t._v(" "),a("p",[t._v("因为 "),a("code",[t._v("this.props")]),t._v(" 和 "),a("code",[t._v("this.state")]),t._v(" 可能会异步更新，所以你不要依赖他们的值来更新下一个状态。")]),t._v(" "),a("p",[t._v("例如，此代码可能会无法更新计数器：")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301032146262.png",alt:"code"}}),t._v(" "),a("p",[t._v("要解决这个问题，可以让 "),a("code",[t._v("setState()")]),t._v(" 接收一个函数而不是一个对象。")]),t._v(" "),a("p",[t._v("这个函数用上一个 state 作为第一个参数，将此次更新被应用时的 props 做为第二个参数：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301032148676.png",alt:"code"}})]),t._v(" "),a("h5",{attrs:{id:"state-的更新会被合并"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-的更新会被合并"}},[t._v("#")]),t._v(" State 的更新会被合并")]),t._v(" "),a("p",[t._v("当调用 "),a("code",[t._v("setState()")]),t._v(" 的时候，React 会把提供的对象合并到当前的 state。")]),t._v(" "),a("p",[t._v("例如，state 包含几个独立的变量：")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301032148528.png",alt:"code"}}),t._v(" "),a("p",[t._v("然后你可以分别调用 "),a("code",[t._v("setState()")]),t._v(" 来单独地更新它们：")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301032149974.png",alt:"code"}}),t._v(" "),a("p",[t._v("这里的合并是浅合并，所以 "),a("code",[t._v("this.setState({comments})")]),t._v(" 完整保留了 "),a("code",[t._v("this.state.posts")]),t._v("， 但是完全替换了 "),a("code",[t._v("this.state.comments")]),t._v("。")]),t._v(" "),a("blockquote",[a("p",[t._v("值得注意的是函数组件中的 useState 将是"),a("strong",[t._v("替换")]),t._v("操作，而不是合并")])]),t._v(" "),a("h2",{attrs:{id:"props"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#props"}},[t._v("#")]),t._v(" Props")]),t._v(" "),a("p",[t._v("在 React 思想中，数据是通过 Props 向下流动的，也叫单向数据流。")]),t._v(" "),a("p",[t._v("我们在组件调用时所写的任何赋值操作都会以对象的形式赋值给组件的 Props 供内部调用：")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301032150894.png",alt:"code"}}),t._v(" "),a("h4",{attrs:{id:"请确保-props-的只读性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请确保-props-的只读性"}},[t._v("#")]),t._v(" 请确保 Props 的只读性")]),t._v(" "),a("p",[t._v("React 非常灵活，但它也有一个严格的规则，即：")]),t._v(" "),a("p",[a("strong",[t._v("所有 React 组件都必须像纯函数一样保护它们的 props 不被更改。")])]),t._v(" "),a("h2",{attrs:{id:"插槽"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插槽"}},[t._v("#")]),t._v(" 插槽")]),t._v(" "),a("p",[t._v("在 React 中，并没有 "),a("strong",[t._v("插槽")]),t._v(" 这种概念，但是却有相同的思路，即 "),a("code",[t._v("props.children")]),t._v(" 这个特殊的 Prop。")]),t._v(" "),a("p",[t._v("来看下面这个例子：")]),t._v(" "),a("div",{staticClass:"language-jsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-jsx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Children")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("props")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n        \t")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("props"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n        ")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),a("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n    )\n}\n\nfunction App(props)")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Children")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n            ")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("Hello World!")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n            ")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("i")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("This is Slot~")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("i")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n        ")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Children")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n")])])])]),a("p",[a("code",[t._v("<Children>")]),t._v(" JSX 标签体中的所有内容都会作为一个 "),a("code",[t._v("children")]),t._v(" prop 传递给 "),a("code",[t._v("Children")]),t._v(" 组件。")]),t._v(" "),a("p",[t._v("因为 "),a("code",[t._v("Children")]),t._v(" 将 "),a("code",[t._v("{props.children}")]),t._v(" 渲染在一个 "),a("code",[t._v("<div>")]),t._v(" 中，被传递的这些子组件最终都会出现在输出结果中。")]),t._v(" "),a("p",[t._v("那么如何实现具名插槽呢？只要将需要传递的组件直接写到 Props 中就行了 😀")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301032151998.png",alt:"code"}}),t._v(" "),a("h2",{attrs:{id:"受控组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#受控组件"}},[t._v("#")]),t._v(" 受控组件")]),t._v(" "),a("p",[t._v("在 HTML 中，表单元素（如"),a("code",[t._v("<input>")]),t._v("、 "),a("code",[t._v("<textarea>")]),t._v(" 和 "),a("code",[t._v("<select>")]),t._v("）通常自己维护 state，并根据用户输入进行更新。")]),t._v(" "),a("p",[t._v("但在 React 中，可变状态通常保存在组件的 "),a("code",[t._v("state")]),t._v(" 属性中，并且只能通过使用 "),a("code",[t._v("setState()")]),t._v(" 来更新。")]),t._v(" "),a("p",[t._v("我们可以把两者结合起来，使 React 的 state 成为“唯一数据源”。渲染表单的 React 组件还控制着用户输入过程中表单发生的操作。被 React 以这种方式控制取值的表单输入元素就叫做“受控组件”。")]),t._v(" "),a("blockquote",[a("p",[t._v("V-Model 的原理")])]),t._v(" "),a("p",[t._v("例如，如果我们想让前一个示例在提交时打印出名称，我们可以将表单写为受控组件：")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301032152888.png",alt:"code"}}),t._v(" "),a("p",[t._v("举一反三，"),a("code",[t._v("<textarea>")]),t._v(" 标签的套路与 "),a("code",[t._v("<input>")]),t._v(" 一致，甚至 "),a("code",[t._v("<select>")]),t._v(" 也是一样的：")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301032153767.png",alt:"code"}}),t._v(" "),a("p",[t._v("总的来说，这使得 "),a("code",[t._v('<input type="text">')]),t._v(", "),a("code",[t._v("<textarea>")]),t._v(" 和 "),a("code",[t._v("<select>")]),t._v(" 之类的标签都非常相似。")]),t._v(" "),a("ul",[a("li",[t._v("它们都接受一个 "),a("code",[t._v("value")]),t._v(" 属性，你可以使用它来实现受控组件。")])]),t._v(" "),a("p",[t._v("​")])])}),[],!1,null,null,null);a.default=o.exports}}]);