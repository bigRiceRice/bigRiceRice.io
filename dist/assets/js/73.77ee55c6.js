(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{377:function(t,s,a){"use strict";a.r(s);var e=a(5),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"🌠-什么是-hooks-钩子"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#🌠-什么是-hooks-钩子"}},[t._v("#")]),t._v(" 🌠 什么是 Hooks - 钩子")]),t._v(" "),s("p",[t._v("Hook 是一些可以让你在函数组件里“钩入” React state 及生命周期等特性的函数。")]),t._v(" "),s("p",[t._v("Hook 其实就是 JavaScript 函数，但是使用它们会有两个额外的规则：")]),t._v(" "),s("ul",[s("li",[t._v("只能在"),s("strong",[t._v("函数最外层")]),t._v("调用 Hook。不要在循环、条件判断或者子函数中调用。")]),t._v(" "),s("li",[t._v("只能在 "),s("strong",[t._v("React 的函数组件")]),t._v("中调用 Hook。不要在其他普通 JavaScript 函数中调用。")])]),t._v(" "),s("p",[t._v("下面就让我们来了解 React 那些常用的 Hook 吧！")]),t._v(" "),s("h3",{attrs:{id:"usestate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#usestate"}},[t._v("#")]),t._v(" useState")]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("useState")]),t._v(" 的用法与 Vue3 的 "),s("code",[t._v("ref")]),t._v(" 函数类似，不过它的返回值是一个数组，其中包含"),s("strong",[t._v("当前")]),t._v("状态和一个让你更新它的函数。")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" setState"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("useState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("initialState"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[s("code",[t._v("initialState")]),t._v("："),s("strong",[t._v("必需")]),t._v("，设置初始值")]),t._v(" "),s("li",[s("code",[t._v("state")]),t._v("：初始值的状态引用")]),t._v(" "),s("li",[s("code",[t._v("setState")]),t._v("：更新状态的函数")])]),t._v(" "),s("h4",{attrs:{id:"关于-setstate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关于-setstate"}},[t._v("#")]),t._v(" 关于 "),s("em",[t._v("setState")])]),t._v(" "),s("p",[t._v("语法：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("updater"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nupdater "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("callback")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("lastState")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" state "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" state "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("如果新的 state 需要通过使用先前的 state 计算得出，那么可以将函数传递给 "),s("code",[t._v("setState")]),t._v("。该函数将接收先前的 state，并返回一个更新后的值。")]),t._v(" "),s("blockquote",[s("p",[t._v("🔴 注意：")]),t._v(" "),s("p",[t._v("与类组件中的 "),s("code",[t._v("setState")]),t._v(" 方法不同，"),s("code",[t._v("useState")]),t._v(" "),s("em",[t._v("Hook")]),t._v(" 的 "),s("code",[t._v("setState")]),t._v(" 的行为将是直接替换原状态，且"),s("strong",[t._v("在新旧状态引用地址不变的情况下")]),t._v("，将不会触发模板更新！！")]),t._v(" "),s("p",[t._v("你可以用函数式的 "),s("code",[t._v("setState")]),t._v(" 结合展开运算符来达到合并更新对象的效果。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" setState"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("useState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("prevState")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 也可以使用 Object.assign")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 必须更新原状态的引用地址，不然将不会触发模板更新！！！")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("prevState"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("updatedValues"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("h4",{attrs:{id:"关于-initialstate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关于-initialstate"}},[t._v("#")]),t._v(" 关于 "),s("em",[t._v("initialState")])]),t._v(" "),s("p",[s("em",[t._v("initialState")]),t._v(" 用于初始化一个 state 状态，但一定不要写成这样的形式：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 假设我们的 state 需要经过大量的计算")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("clacState")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10086")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" setState"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("useState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("clacState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 🔴")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("State")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("data")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*...*/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" setState"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("useState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("State")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 🔴")]),t._v("\n")])])]),s("p",[t._v("不要直接在 "),s("em",[t._v("initialState")]),t._v(" 中直接调用函数或调用一个类的初始化函数，这将影响性能且可能会造成为止的 BUG，因为每次组件重新渲染都会重新调用。")]),t._v(" "),s("p",[t._v("而且 "),s("em",[t._v("initialState")]),t._v(" 是可以惰性初始化的。上述代码应该修改成如下：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 假设我们的 state 需要经过大量的计算")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("clacState")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10086")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" setState"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("useState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" clacState "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 🟢")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("State")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("data")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*...*/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" setState"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("useState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("State")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 🔴")]),t._v("\n")])])]),s("h3",{attrs:{id:"useeffect"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#useeffect"}},[t._v("#")]),t._v(" useEffect")]),t._v(" "),s("p",[s("em",[t._v("Effect Hook")]),t._v(" 可以让你在函数组件中执行副作用操作：")]),t._v(" "),s("div",{staticClass:"language-jsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-jsx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" React"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" useState"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" useEffect "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'react'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Example")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" setCount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("useState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("useEffect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("title "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("You clicked ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("count"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(" times")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("由于 "),s("code",[t._v("useEffect")]),t._v(" 中极其生草的回调调用，可以把 "),s("code",[t._v("useEffect")]),t._v(" Hook 看做 "),s("code",[t._v("componentDidMount 挂载前")]),t._v(" ，"),s("code",[t._v("componentDidUpdate 更新前")]),t._v(" 和 "),s("code",[t._v("componentWillUnmount 卸载阶段")]),t._v(" 这三个函数的组合，并且它从某种角度上还能做到类似 Vue 中 "),s("code",[t._v("watch")]),t._v(" 的功能。")]),t._v(" "),s("div",{staticClass:"language-jsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-jsx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("useState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'哈哈哈'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("useEffect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里的代码挂载前与更新前都会调用")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回一个函数，函数中的内容将在卸载阶段时调用")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只有代码挂载前与 message 产生更新时才会调用 useEffect")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果想执行只运行一次的 effect（仅在组件挂载和卸载时执行），可以传递一个空数组（[]）作为第二个参数。")]),t._v("\n")])])]),s("h5",{attrs:{id:"使用多个-effect-实现关注点分离"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用多个-effect-实现关注点分离"}},[t._v("#")]),t._v(" 使用多个 Effect 实现关注点分离")]),t._v(" "),s("p",[t._v("使用 Hook 其中一个"),s("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/hooks-intro.html#complex-components-become-hard-to-understand",target:"_blank",rel:"noopener noreferrer"}},[t._v("目的"),s("OutboundLink")],1),t._v("就是要解决 class 中生命周期函数经常包含不相关的逻辑，但又把相关逻辑分离到了几个不同方法中的问题。可是 "),s("code",[t._v("useEffect")]),t._v(" 所运行的方式实在是多样，所以我们可以多次调用 "),s("code",[t._v("useEffect")]),t._v(" ，这会将不相关逻辑分离到不同的 effect 中：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("useEffect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这个 effect 只在每次挂载前都执行")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("useEffect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这个 effect 只在卸载阶段执行")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("useEffect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这个 effect 充当 watchEffect(vue)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("xx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("xxx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("xxxx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])])]),s("h3",{attrs:{id:"usecontext"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#usecontext"}},[t._v("#")]),t._v(" useContext")]),t._v(" "),s("p",[t._v("顶级组件可以使用 "),s("code",[t._v("createContext")]),t._v(" 创建一个全局上下文对象，然后使用 "),s("code",[t._v("<Context.Provider>")]),t._v(" 包裹的所有子组件都可以共享数据。")]),t._v(" "),s("p",[t._v("那么子组件想要获取数据可以通过在 "),s("code",[t._v("<Context.Consumer>")]),t._v(" 标签中返回函数来访问数据，也可以使用 "),s("code",[t._v("useContext")]),t._v(" 快速结构数据！")]),t._v(" "),s("p",[t._v("首先顶级组件一定要将 "),s("code",[t._v("createContext")]),t._v(" 返回的对象暴露给需要使用数据的子组件，然后将 "),s("code",[t._v("Context")]),t._v(" 传递给 "),s("code",[t._v("useContext")]),t._v(" ：")]),t._v(" "),s("div",{staticClass:"language-jsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-jsx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" Context "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./App"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("setName "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("useContext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"usememo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#usememo"}},[t._v("#")]),t._v(" useMemo")]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("useMemo")]),t._v(" 是一个性能优化钩子，它可以缓存一个任意值，并指定依赖，只有当依赖变了，值才会重新获取。")])]),t._v(" "),s("p",[s("code",[t._v("useMemo")]),t._v(" 钩子是性能优化相关的钩子，要理解它的使用场景，我们先要看几个性能问题。")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301132150751.png",alt:"code"}}),t._v(" "),s("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301132150786.gif",alt:"demo"}}),t._v(" "),s("p",[t._v("我们假设上面这段代码中的 "),s("code",[t._v("processiCount")]),t._v(" 中经过了大量的计算才得出 "),s("code",[t._v("count")]),t._v(" ，但是每次 "),s("code",[t._v("time")]),t._v(" 更新进而引发整个组件更新时。"),s("code",[t._v("processiCount")]),t._v(" 这个函数作为显示内容就会自动执行一次，这在代码层面是合乎情理的，因为我们就是这么写的。")]),t._v(" "),s("p",[t._v("但 "),s("code",[t._v("time")]),t._v(" 的更新与 "),s("code",[t._v("processiCount")]),t._v(" 并没有直接的联系，我们或许根本不想 "),s("code",[t._v("processiCount")]),t._v(" 重复执行，那就要使用 "),s("code",[t._v("useMemo")]),t._v(" Hook 来包装 "),s("code",[t._v("processiCount")]),t._v(" 函数，如下面这段伪代码：")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301132150646.png",alt:"code"}}),t._v(" "),s("p",[s("code",[t._v("useMemo")]),t._v(" 的作用非常像"),s("strong",[t._v("缓存")]),t._v("，它将第一次获得的值存起来，只有当依赖更新时，才会重新计算。")]),t._v(" "),s("h5",{attrs:{id:"请注意"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#请注意"}},[t._v("#")]),t._v(" 请注意：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("useMemo")]),t._v(" 的第一个参数是一个 "),s("code",[t._v("getter")]),t._v(" 函数，函数中必须明确返回值，返回值就是 "),s("code",[t._v("useMemo")]),t._v(" 的返回值。")]),t._v(" "),s("li",[s("code",[t._v("useMemo")]),t._v(" 的第二个参数以数组的形式定义依赖项，只有当依赖项改变，内部函数或值才会重新获取。")])]),t._v(" "),s("h5",{attrs:{id:"换一种方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#换一种方式"}},[t._v("#")]),t._v(" 换一种方式")]),t._v(" "),s("p",[t._v("所以，"),s("code",[t._v("useMemo")]),t._v(" 钩子确实可以帮助我们在这里避免不必要的计算……但它"),s("em",[t._v("真的")]),t._v("是这里最好的解决方案吗？")]),t._v(" "),s("p",[t._v("但 "),s("code",[t._v("useMemo")]),t._v(" 能做到的，我们通常可以将其封装成两个互不相干的组件即可解决问题，就像这段伪代码：")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301022244122.png",alt:"code"}}),t._v(" "),s("p",[t._v("但这也不是最优解，因为在真实的开发中，很多组件不得不将状态集中到一起，分开放置通常是不行的。")]),t._v(" "),s("p",[t._v("其实我们可以将某些组件定义成"),s("strong",[t._v("纯组件(Pure components)")]),t._v("，纯组件通常意味着：")]),t._v(" "),s("ul",[s("li",[s("h5",{attrs:{id:"组件的输入-应该有一个与之对应的输入-输入不变-输出永远不变。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组件的输入-应该有一个与之对应的输入-输入不变-输出永远不变。"}},[t._v("#")]),t._v(" 组件的输入，应该有一个与之对应的输入，输入不变，输出永远不变。")]),t._v(" "),s("ul",[s("li",[t._v("可以理解为若组件的 "),s("code",[t._v("props")]),t._v(" 不变，那么它不会因为其他的东西而重新渲染，它只关注 "),s("code",[t._v("props")]),t._v(" 的变化。")]),t._v(" "),s("li",[t._v("通过 "),s("code",[t._v("React.memo()")]),t._v(" 定义纯组件")])])])]),t._v(" "),s("h3",{attrs:{id:"react-memo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react-memo"}},[t._v("#")]),t._v(" React.memo")]),t._v(" "),s("blockquote",[s("p",[t._v("React.memo 是一个性能优化钩子，它的用法与 useMemo 差不多，不过 memo 时组件层面的缓存组件，也被成为纯组件。")])]),t._v(" "),s("p",[t._v("结合 "),s("code",[t._v("useMemo")]),t._v(" 的例子，我们知道有时候是无法做到将两个组件彻底分开的，大多时候都需要将状态集中，这也意味着当前组件因为某些值重新渲染时会导致子组件也重新渲染，就像下面这个例子：")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301022246260.png",alt:"code"}}),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301022246571.png",alt:"code"}}),t._v(" "),s("p",[t._v("上面这个例子，每当 "),s("code",[t._v("time")]),t._v(" 更新引起 "),s("code",[t._v("App")]),t._v(" 组件重新渲染时，"),s("code",[t._v("Counter")]),t._v(" 组件也会被迫重新渲染，而且它没有更新任何东西。这个时候就可以使用 "),s("code",[t._v("React.memo")]),t._v(" 将它定义为纯组件，如下面这段伪代码：")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301022247882.png",alt:"code"}}),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("memo")]),t._v(" 更常见的是在导出时就定义，而不是在引入时定义："),s("code",[t._v("export default memo(function xxx ())")])])]),t._v(" "),s("p",[t._v("这样定义后，每当 "),s("code",[t._v("time")]),t._v(" 更新时，"),s("code",[t._v("Counter")]),t._v(" 不会被迫重新渲染了")]),t._v(" "),s("h5",{attrs:{id:"一个-memo-失效的场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一个-memo-失效的场景"}},[t._v("#")]),t._v(" 一个 memo 失效的场景")]),t._v(" "),s("p",[t._v("下面我们来看一个例子，在这个例子中 "),s("code",[t._v("memo")]),t._v(" “失效了”：")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301022248846.png",alt:"code"}}),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301022250850.png",alt:"code"}}),t._v(" "),s("p",[t._v("这是使用场景：")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301021749023.gif",alt:"demo"}}),t._v(" "),s("p",[t._v("我们定义了一组 "),s("code",[t._v("styles")]),t._v(" 将它传入 "),s("code",[t._v("Boxes")]),t._v(" 纯组件中。理想的情况下只有当我们移动滚轮才会触发 "),s("code",[t._v("Boxes")]),t._v(" 渲染。但如果我们打开控制台就会看到 "),s("code",[t._v("Boxes")]),t._v(" 组件并没有像我们想的那样渲染：")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301021752510.gif",alt:"demo"}}),t._v(" "),s("p",[t._v("其实问题并不复杂，并不是 "),s("code",[t._v("memo")]),t._v(" 失效了，而是我们定义的那一组 "),s("code",[t._v("styles")]),t._v(" 出问题了，我们一步步来看到底发生了什么事。")]),t._v(" "),s("ol",[s("li",[t._v("首先我们定义了一个 "),s("code",[t._v("styles")]),t._v(" 数组，将它传入了 "),s("code",[t._v("<Boxes>")]),t._v(" 中。\n"),s("ul",[s("li",[t._v("数组是引用对象，而 "),s("code",[t._v("time")]),t._v(" 每次更新都会重新定义 "),s("code",[t._v("styles")]),t._v(" 数组，那么 "),s("code",[t._v("styles")]),t._v(" 的地址其实每秒都在变更。")])])]),t._v(" "),s("li",[s("code",[t._v("styles")]),t._v(" 数组地址每秒都在更改，导致 "),s("code",[t._v("<Boxes>")]),t._v(" 每秒都接收着不同的 "),s("code",[t._v("props")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("<Boxes>")]),t._v(" 每秒重新渲染。")])]),t._v(" "),s("p",[t._v("问题很好解决，只需要将 "),s("code",[t._v("styles")]),t._v(" 使用 "),s("code",[t._v("useMemo")]),t._v(" 给他一个依赖缓存起来就行了：")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301022253689.png",alt:"code"}}),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301021852786.gif",alt:"demo"}}),t._v(" "),s("h3",{attrs:{id:"usecallback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#usecallback"}},[t._v("#")]),t._v(" useCallback")]),t._v(" "),s("blockquote",[s("p",[t._v("useCallback 是一个性能优化钩子，它可以缓存一个函数，并指定依赖，只有当依赖变更时，才会重新定义函数。")])]),t._v(" "),s("p",[s("code",[t._v("useCallback")]),t._v(" 的作用与 "),s("code",[t._v("useMemo")]),t._v(" 差不多，不过 "),s("code",[t._v("useMemo")]),t._v(" 在语义化层面更加侧重缓存"),s("strong",[t._v("值类型")]),t._v("，"),s("code",[t._v("useCallback")]),t._v(" 侧重缓存"),s("strong",[t._v("函数类型")]),t._v("。")]),t._v(" "),s("p",[t._v("还是 "),s("code",[t._v("useMemo")]),t._v(" 中的例子，我们给子组件传入一个回调函数，但组件中的 "),s("code",[t._v("time")]),t._v(" 每秒都在变更，那么所定义的函数也会重复定义，且重复传入子组件中，从而引起子组件的重新渲染：")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301022255980.png",alt:"code"}}),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301021955708.gif",alt:"demo"}}),t._v(" "),s("p",[t._v("解决方法也很简单，使用 "),s("code",[t._v("useCallback")]),t._v(" 包裹函数体即可。")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("useCallback")]),t._v(" 第一个参数可以传入一个函数或函数体，它的返回值就是传入的函数或函数体")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("useCallback")]),t._v(" 第二个参数以数组的形式定义依赖项，只有当依赖项改变，内部函数才会重新调用。")])])]),t._v(" "),s("p",[t._v("下面有两个解决方法：")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://sbr-1314368469.cos.ap-guangzhou.myqcloud.com/Images/202301022300680.png",alt:"code"}})])}),[],!1,null,null,null);s.default=n.exports}}]);